#usda 1.0

def Xform "World" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    rel material:binding = </World/Leaves_Mat> (
        bindMaterialAs = "strongerThanDescendants"
    )

    def Xform "Assets"
    {
        def Xform "leaf_litter" (
            kind = "component"
            prepend references = @models/Leaves/LOD0/leaf_litter.usdc@
        )
        {
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0, 1, 0), (0, 1, 0, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Xform "leaves" (
            kind = "component"
            prepend references = @models/Leaves/LOD0/leaves.usdc@
        )
        {
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0, 1, 0), (0, 1, 0, 0), (0, 0, 0, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }
    }

    def Xform "Instance_0_0_leaves" (
        instanceable = true
        prepend references = </World/Assets/leaves>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.28397954, 0.28397954, 0.28397954)
        double3 xformOp:translate = (-1.3929641246795654, 0, -1.3929641246795654)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Instance_0_1_leaves" (
        instanceable = true
        prepend references = </World/Assets/leaves>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.26774016, 0.26774016, 0.26774016)
        double3 xformOp:translate = (-1.901992678642273, 0, -0.901992678642273)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Instance_0_2_leaves" (
        instanceable = true
        prepend references = </World/Assets/leaves>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.27497512, 0.27497512, 0.27497512)
        double3 xformOp:translate = (-1.3767491579055786, 0, 0.6232509016990662)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Instance_1_0_leaves" (
        instanceable = true
        prepend references = </World/Assets/leaves>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.28564084, 0.28564084, 0.28564084)
        double3 xformOp:translate = (-0.7783424258232117, 0, -1.7783424854278564)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Instance_1_1_leaves" (
        instanceable = true
        prepend references = </World/Assets/leaves>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.28096694, 0.28096694, 0.28096694)
        double3 xformOp:translate = (-0.9732808470726013, 0, -0.9732808470726013)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Instance_1_2_leaf_litter" (
        instanceable = true
        prepend references = </World/Assets/leaf_litter>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.25414822, 0.25414822, 0.25414822)
        double3 xformOp:translate = (-0.9032738208770752, 0, 0.0967261791229248)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Instance_2_0_leaf_litter" (
        instanceable = true
        prepend references = </World/Assets/leaf_litter>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.26100108, 0.26100108, 0.26100108)
        double3 xformOp:translate = (0.4170325994491577, 0, -1.5829674005508423)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Instance_2_1_leaves" (
        instanceable = true
        prepend references = </World/Assets/leaves>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.27438247, 0.27438247, 0.27438247)
        double3 xformOp:translate = (0.5472589135169983, 0, -0.4527410864830017)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Instance_2_2_leaf_litter" (
        instanceable = true
        prepend references = </World/Assets/leaf_litter>
    )
    {
        token visibility = "inherited"
        float3 xformOp:rotateXYZ = (0, 90, 90)
        float3 xformOp:scale = (0.28826004, 0.28826004, 0.28826004)
        double3 xformOp:translate = (0.21780849993228912, 0, 0.21780849993228912)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Material "Leaves_Mat"
    {
        reorder nameChildren = ["PBRSurface", "Dot", "Dot_2", "Image2D", "Dot_1", "Image2D_1", "Separate4", "Grass_Animation"]
        token cullMode = "none" (
            allowedTokens = ["unspecified", "none", "front", "back"]
        )
        asset inputs:AlphaMap = @Eucalyptus_Ground_Leaves_Colour-alpha.png@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-684.1396, -150.91136)
                    int stackingOrderInSubgraph = 1095
                }
            }
        )
        asset inputs:ColorMap = @models/Leaves/LOD0/textures/Eucalyptus_Ground_Leaves_Colour.png@ (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-524.8635, -483.09747)
                    int stackingOrderInSubgraph = 427
                }
            }
        )
        token outputs:mtlx:surface.connect = </World/Leaves_Mat/PBRSurface.outputs:out>
        token outputs:realitykit:vertex.connect = None
        float2 ui:nodegraph:node:pos = (135.55089, 13.369736)
        int ui:nodegraph:node:stackingOrder = 10
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (430.98355, 118.836945)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 677

        def Shader "PBRSurface"
        {
            uniform token info:id = "ND_realitykit_pbr_surfaceshader"
            float inputs:ambientOcclusion
            color3f inputs:baseColor = (1, 1, 1) (
                colorSpace = "lin_srgb"
            )
            color3f inputs:baseColor.connect = </World/Leaves_Mat/Dot_2.outputs:out>
            float inputs:clearcoat
            float3 inputs:clearcoatNormal
            float inputs:clearcoatRoughness
            color3f inputs:emissiveColor
            bool inputs:hasPremultipliedAlpha
            float inputs:metallic
            float3 inputs:normal.connect = None
            float inputs:opacity.connect = </World/Leaves_Mat/Dot.outputs:out>
            float inputs:opacityThreshold = 0.8
            float inputs:roughness = 0.5
            float inputs:specular
            token outputs:out
            float2 ui:nodegraph:node:pos = (122.91724, -5.484755)
            int ui:nodegraph:node:stackingOrder = 1180
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:normal"]
        }

        def Shader "Dot"
        {
            uniform token info:id = "ND_dot_float"
            float inputs:in.connect = </World/Leaves_Mat/Separate4.outputs:outx>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-68.41439, 114.68096)
            int ui:nodegraph:node:stackingOrder = 1089
        }

        def Shader "Dot_2"
        {
            uniform token info:id = "ND_dot_color3"
            color3f inputs:in.connect = </World/Leaves_Mat/Image2D.outputs:out>
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-74.97684, -99.29204)
            int ui:nodegraph:node:stackingOrder = 504
        }

        def Shader "Image2D"
        {
            uniform token info:id = "ND_RealityKitTexture2D_color3"
            float inputs:bias
            string inputs:border_color = "transparent_black"
            color3f inputs:default
            float inputs:dynamic_min_lod_clamp
            asset inputs:file.connect = </World/Leaves_Mat.inputs:ColorMap>
            string inputs:mag_filter
            int inputs:max_anisotropy
            float inputs:max_lod_clamp = 65504
            string inputs:min_filter
            float inputs:min_lod_clamp
            string inputs:mip_filter
            bool inputs:no_flip_v = 1
            int2 inputs:offset
            float2 inputs:texcoord
            string inputs:u_wrap_mode
            string inputs:v_wrap_mode
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-313.45416, -503.9556)
            int ui:nodegraph:node:stackingOrder = 1107
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:dynamic_min_lod_clamp"]
        }

        def Shader "Image2D_1"
        {
            uniform token info:id = "ND_RealityKitTexture2D_vector4"
            float inputs:bias
            string inputs:border_color
            float4 inputs:default
            float inputs:dynamic_min_lod_clamp
            asset inputs:file.connect = </World/Leaves_Mat.inputs:AlphaMap>
            string inputs:mag_filter
            int inputs:max_anisotropy
            float inputs:max_lod_clamp
            float inputs:min_lod_clamp
            bool inputs:no_flip_v = 1
            int2 inputs:offset
            float2 inputs:texcoord
            string inputs:u_wrap_mode
            string inputs:v_wrap_mode
            float4 outputs:out
            float2 ui:nodegraph:node:pos = (-464.26138, -29.25302)
            int ui:nodegraph:node:stackingOrder = 1100
        }

        def Shader "Separate4"
        {
            uniform token info:id = "ND_separate4_vector4"
            float4 inputs:in.connect = </World/Leaves_Mat/Image2D_1.outputs:out>
            float outputs:outw
            float outputs:outx
            float outputs:outy
            float outputs:outz
            float2 ui:nodegraph:node:pos = (-219.18825, 142.97026)
            int ui:nodegraph:node:stackingOrder = 1086
        }
    }
}

