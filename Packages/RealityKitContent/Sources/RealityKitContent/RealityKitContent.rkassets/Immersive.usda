#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Landscape_Dome", "Ground", "Trees", "Branches", "Group", "Birds", "Birds_1", "Looping_Birds", "Ground_Bumpy", "Sky_Dome", "Kangaroo_1", "Kangaroo_Loop"]
    def "Landscape_Dome" (
        references = @SkyDome/SkyDome.usdz@
    )
    {
        reorder nameChildren = ["SkyDome_1", "Dome_01", "Ground_01", "Grid", "Looks"]
        float3 xformOp:scale = (10, 10, 10)
        float3 xformOp:translate = (0, -30, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Ground_01" (
            active = false
        )
        {
        }

        over "Grid" (
            active = false
        )
        {
        }

        over "Looks"
        {
            over "GroundMATSG" (
                active = false
            )
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "GridMATSG" (
                active = false
            )
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "DomeMATSG"
            {
                string inputs:file5:varname (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 13
                        }
                    }
                )
                asset inputs:image = @SkyDome/autumn_field_8k.hdr@ (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-809.14417, 22.825876)
                            int stackingOrderInSubgraph = 15
                        }
                    }
                )
                asset inputs:mask = @SkyDome/mask2.png@ (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-873.1893, 368.71664)
                            int stackingOrderInSubgraph = 880
                        }
                    }
                )
                token outputs:mtlx:surface.connect = </Root/Landscape_Dome/Looks/DomeMATSG/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/Landscape_Dome/Looks/DomeMATSG/DomeMAT.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (112.375, 110.5)

                over "DomeMAT" (
                    active = false
                )
                {
                    color3f inputs:diffuseColor = (0.08266256, 0.08266256, 0.08266256) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:diffuseColor.connect = </Root/SkyDome/Looks/DomeMATSG/diffuseColor.outputs:rgb>
                    float inputs:opacity = 0.8
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @rogland_clear_night_4k.hdr@
                    float2 inputs:st.connect = </Root/Landscape_Dome/Looks/DomeMATSG/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/Landscape_Dome/Looks/DomeMATSG.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "Image2D"
                {
                    uniform token info:id = "ND_RealityKitTexture2D_color3"
                    string inputs:border_color
                    asset inputs:file.connect = </Root/Landscape_Dome/Looks/DomeMATSG.inputs:image>
                    bool inputs:no_flip_v = 1
                    int2 inputs:offset
                    string inputs:u_wrap_mode
                    string inputs:v_wrap_mode
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-612.54767, 89.80469)
                    int ui:nodegraph:node:stackingOrder = 34
                }

                def Shader "PreviewSurface"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    float inputs:clearcoat
                    float inputs:clearcoatRoughness
                    color3f inputs:diffuseColor.connect = </Root/Landscape_Dome/Looks/DomeMATSG/Image2D.outputs:out>
                    color3f inputs:emissiveColor
                    float inputs:ior
                    float inputs:metallic
                    float3 inputs:normal
                    float inputs:occlusion
                    float inputs:opacity = 0.9
                    float inputs:opacity.connect = </Root/Landscape_Dome/Looks/DomeMATSG/Dot.outputs:out>
                    float inputs:opacityThreshold = 0.8
                    float inputs:roughness = 1
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-252.74019, 66.42131)
                    int ui:nodegraph:node:stackingOrder = 48
                    string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced"]
                }

                def Shader "Separate4"
                {
                    uniform token info:id = "ND_separate4_color4"
                    color4f inputs:in.connect = </Root/Landscape_Dome/Looks/DomeMATSG/Image2D_1.outputs:out>
                    float outputs:outa
                    float outputs:outb
                    float outputs:outg
                    float outputs:outr
                    float2 ui:nodegraph:node:pos = (-468.46216, 428.73383)
                    int ui:nodegraph:node:stackingOrder = 876
                }

                def Shader "Image2D_1"
                {
                    uniform token info:id = "ND_RealityKitTexture2D_color4"
                    float inputs:bias
                    string inputs:border_color
                    float inputs:dynamic_min_lod_clamp
                    asset inputs:file.connect = </Root/Landscape_Dome/Looks/DomeMATSG.inputs:mask>
                    float inputs:min_lod_clamp
                    bool inputs:no_flip_v = 1
                    int2 inputs:offset
                    float2 inputs:texcoord
                    string inputs:u_wrap_mode
                    string inputs:v_wrap_mode
                    color4f outputs:out
                    float2 ui:nodegraph:node:pos = (-699.47797, 490.43713)
                    int ui:nodegraph:node:stackingOrder = 878
                }

                def Shader "Dot"
                {
                    uniform token info:id = "ND_dot_float"
                    float inputs:in.connect = </Root/Landscape_Dome/Looks/DomeMATSG/Separate4.outputs:outr>
                    float outputs:out
                    float2 ui:nodegraph:node:pos = (-236.48116, 364.90558)
                    int ui:nodegraph:node:stackingOrder = 924
                }
            }
        }

        over "Dome_01"
        {
            float3 xformOp:scale = (0.03, 0.03, 0.03)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Scope "Trees" (
        active = true
    )
    {
        reorder nameChildren = ["Redgum_4_LOD0", "Redgum_2_LOD0", "Redgum_3_LOD0"]
        def "Redgum_4_LOD0" (
            active = true
            references = @Trees/Red Gum/Redgum_4_LOD0.usdc@
        )
        {
            quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
            float3 xformOp:translate = (35.95636, 0, -7.4673104)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Redgum_2_LOD0" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707964, 0, 0)
            }
            references = @Trees/Red Gum/Redgum_2_LOD0.usdc@
        )
        {
            quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
            float3 xformOp:translate = (-11.329645, 4.172325e-7, 18.05186)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Redgum_3_LOD0" (
            active = true
            references = @Trees/Red Gum/Redgum_3_LOD0.usdc@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-2.9271507, 0, 0.027032852)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Redgum_3_LOD0"
            {
                over "LOD0_008"
                {
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def RealityKitComponent "GroundingShadow"
                    {
                        bool enableIBLShadow = 1
                        bool enableMeshShadow = 1
                        bool enableReceiveIBLShadow = 1
                        bool enableReceiveMeshShadow = 1
                        uniform token info:id = "RealityKit.GroundingShadow"
                    }
                }
            }
        }
    }

    def Scope "Branches" (
        active = true
    )
    {
        reorder nameChildren = ["Branch1", "Branch2", "Branch3"]
        def "Branch1" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707963, 0, 0)
            }
            references = @Branches/Branch1.usdc@
        )
        {
            quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (3.741787, 0.4001875, -16.4037)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Branch2" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5912735, 1.0517621, 1.2016054e-7)
            }
            references = @Branches/Branch2.usdc@
        )
        {
            quatf xformOp:orient = (0.6052704, -0.6177934, 0.3512973, 0.35856566)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-4.7953672, 0, -6.622853)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Branch2"
            {
                over "Cube_002"
                {
                }
            }
        }

        def "Branch3" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707963, 1.2129174, -3.4031774e-7)
            }
            references = @Branches/Branch3.usdc@
        )
        {
            quatf xformOp:orient = (0.5810096, -0.5810094, 0.40302363, 0.40302336)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.9999999)
            float3 xformOp:translate = (3.7728605, 0.053313076, -3.8907747)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "Group" (
        active = true
    )
    {
        reorder nameChildren = ["Redgum_Large_LOD2", "Redgum_2_LOD0", "Redgum_3_LOD0", "Redgum_4_LOD0", "Redgum_2_LOD0_1", "Redgum_3_LOD0_1"]
        def "Redgum_3_LOD0" (
            active = true
            references = @Trees/Red Gum/Redgum_3_LOD0.usdc@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (52.231117, 0, 54.15513)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Redgum_4_LOD0" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707964, 0, 0)
            }
            references = @Trees/Red Gum/Redgum_4_LOD0.usdc@
        )
        {
            quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
            float3 xformOp:translate = (-77.65844, -5.9604645e-7, 44.919872)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Redgum_2_LOD0_1" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707964, 0, 0)
            }
            references = @Trees/Red Gum/Redgum_2_LOD0.usdc@
        )
        {
            quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
            float3 xformOp:translate = (-43.610306, 0.000008106232, -68.02272)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Redgum_3_LOD0_1" (
            active = true
            references = @Trees/Red Gum/Redgum_3_LOD0.usdc@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-91.133484, 0, -21.038292)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "Redgum_Large_LOD2" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707963, 0, 0)
            }
            references = @Trees/Red Gum/Redgum_Large_LOD2.usdc@
        )
        {
            quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, -39.272057)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def RealityKitTimeline "Birds"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                float3 axis = (0, 0.96296674, 0.26962015)
                int blendLayer = 300
                double duration = 30
                uniform token info:id = "89CEFF2F-96E2-4247-8054-553FCF9D951A"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 1
                rel pivotEntity = </Root>
                float revolutions = 0.6
                double startTime = 0
                rel target = </Root/Birds_1>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 0.6666666865348816
                uniform token info:id = "441DC2D9-E818-499B-B25C-21A4C3B34E7B"
                double loopCount = 45
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Root/Birds_1>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def "Birds_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (0.20943955, 0, 0)
        }
        references = @Animals/bird.usdz@
    )
    {
        quatf xformOp:orient = (0.9945219, 0.10452848, 0, 0)
        float3 xformOp:scale = (0.02, 0.02, 0.02)
        float3 xformOp:translate = (30, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "AnimationLibrary"
        {
            token info:id = "RealityKit.AnimationLibrary"

            def RealityKitAnimationFile "default_subtree_animation"
            {
                uniform bool looping = 1
                uniform string name = "default subtree animation"
            }
        }

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Birds_1/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Birds_1/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Birds_1/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Birds_1>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/Looping_Birds>
                rel animationLibraryKeyOverrideKey = </Root/Birds_1/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def RealityKitTimeline "Looping_Birds"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 30.00000089406967
                uniform token info:id = "4874E6A3-2A31-4771-BF0C-526CE97DF9CE"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Birds>
            }
        }
    }

    def "Kangaroo" (
        active = true
        references = @Animals/Kangaroo.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (15.000786, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "RCP_BehaviorsContainer"
        {
            rel behaviors = </Root/Kangaroo/OnAddedToScene>
            uniform token info:id = "RCP.BehaviorsContainer"
        }

        def Preliminary_Behavior "OnAddedToScene"
        {
            rel actions = </Root/Kangaroo/OnAddedToScene/Action>
            uniform bool exclusive
            rel triggers = </Root/Kangaroo/OnAddedToScene/Trigger>

            def Preliminary_Trigger "Trigger"
            {
                rel affectedObjects = </Root/Kangaroo>
                token info:id = "SceneTransition"
            }

            def Preliminary_Action "Action"
            {
                rel affectedObjects = </Root>
                rel animationLibraryKey = </Root/Kangaroo_Loop>
                rel animationLibraryKeyOverrideKey = </Root/Kangaroo/OnAddedToScene/Trigger>
                token info:id = "PlayTimeline"
                int loops = 0
                int performCount = 1
                token type = "serial"
            }
        }
    }

    def RealityKitTimeline "Kangaroo_1"
    {
        reorder nameChildren = ["Track", "Track3", "Track2"]
        def RealityKitTrack "Track"
        {
            reorder nameChildren = ["Animation", "Animation2", "Animation3"]
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "Walk"
                int blendLayer = 500
                double duration = 1.0121111111111112
                uniform token info:id = "E354BF32-C439-463A-B727-35F8B8701F36"
                double loopCount = 8
                bool parentControllers = 0
                bool separateAnimatedValue = 1
                double startTime = 4.3498519361933425
                rel target = </Root/Kangaroo>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation3"
            {
                string actionKind = "animation"
                string animation = "Jump Run"
                int blendLayer = 500
                double duration = 0.7089830164251343
                uniform token info:id = "7F58CA09-AAB6-48C0-8430-7150713C60CE"
                double loopCount = 3
                bool separateAnimatedValue = 1
                double startTime = 16.46025004843563
                rel target = </Root/Kangaroo>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2"
            {
                string actionKind = "animation"
                string animation = "Walk"
                int blendLayer = 500
                double duration = 1.0121111111111112
                uniform token info:id = "E354BF32-C439-463A-B727-35F8B8701F36"
                double loopCount = 28
                bool parentControllers = 0
                bool separateAnimatedValue = 1
                double startTime = 22.649244843615723
                rel target = </Root/Kangaroo>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track3"
        {
            reorder nameChildren = ["Animation2", "Animation2_1"]
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 8.107841264007348
                uniform token info:id = "35F0598A-8D57-496E-AAE2-5752555487E0"
                token orbitDirection = "clockwise"
                bool orientToPath = 1
                rel pivotEntity = </Root>
                float revolutions = 0.15
                double startTime = 4.216398843610259
                rel target = </Root/Kangaroo>
            }

            def RealityKitAction "Orbit2"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 2.260141824856013
                uniform token info:id = "1C17D905-0D22-4149-A82F-64FF48BDC10C"
                bool orientToPath = 1
                rel pivotEntity = </Root>
                float revolutions = 0.2
                double startTime = 16.443710856236468
                rel target = </Root/Kangaroo>
            }

            def RealityKitAction "Orbit22"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 28.321278995674554
                uniform token info:id = "1C17D905-0D22-4149-A82F-64FF48BDC10C"
                bool orientToPath = 1
                rel pivotEntity = </Root>
                float revolutions = 0.65
                double startTime = 22.666298935819697
                rel target = </Root/Kangaroo>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
            }
        }

        def RealityKitTrack "Track2"
        {
            reorder nameChildren = ["Animation2", "Animation2_2", "Animation2_1", "Animation2_12"]
            def RealityKitAction "Animation2_1"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 4.802606627989083
                uniform token info:id = "24AD5B12-BBD1-43A8-A7A7-07CF7535793B"
                bool separateAnimatedValue = 1
                double startTime = 18.5020672626281
                rel target = </Root/Kangaroo>
                float2 ui:nodegraph:node:pos = (215.75, 104.5)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2_12"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 4.802606627989083
                uniform token info:id = "24AD5B12-BBD1-43A8-A7A7-07CF7535793B"
                bool separateAnimatedValue = 1
                double startTime = 50.82051337849813
                rel target = </Root/Kangaroo>
                float2 ui:nodegraph:node:pos = (235.75, 124.5)
                int ui:nodegraph:node:stackingOrder = 2

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 4.802606627989083
                uniform token info:id = "24AD5B12-BBD1-43A8-A7A7-07CF7535793B"
                bool separateAnimatedValue = 1
                double startTime = 12.181307868852453
                rel target = </Root/Kangaroo>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2_2"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 4.802606627989083
                uniform token info:id = "24AD5B12-BBD1-43A8-A7A7-07CF7535793B"
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Root/Kangaroo>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Kangaroo_Loop"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 1000
                double duration = 55.62312000648721
                uniform token info:id = "250E2AFF-476F-45FF-84DB-94633F22326E"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Kangaroo_1>
            }
        }
    }

    def RealityKitComponent "EnvironmentLightingConfiguration"
    {
        float environmentLightingWeight = 1
        uniform token info:id = "RealityKit.EnvironmentLightingConfiguration"
    }

    def "Ground_Bumpy" (
        active = true
        prepend references = @Ground/Ground Bumpy.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GroundTex"
        {
            over "Circle"
            {
                over "Circle_001"
                {
                    def RealityKitComponent "GroundingShadow"
                    {
                        bool enableIBLShadow = 0
                        bool enableMeshShadow = 0
                        uniform token info:id = "RealityKit.GroundingShadow"
                    }
                }
            }
        }
    }
}

