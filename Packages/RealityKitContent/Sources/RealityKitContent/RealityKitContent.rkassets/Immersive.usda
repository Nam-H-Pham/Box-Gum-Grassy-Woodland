#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["SkyDome", "Eucalyptus_Albens_1_LOD0", "Ground", "Redgum_3_LOD0"]
    def "Redgum_3_LOD0" (
        active = true
        references = @Trees/Red Gum/Redgum_3_LOD0.usdc@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-2.9271507, 0, 0.027032852)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "SkyDome" (
        active = true
        prepend references = @SkyDome.usdz@
    )
    {
        float3 xformOp:scale = (10, 10, 10)
        float3 xformOp:translate = (0, -40, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Ground_01" (
            active = false
        )
        {
        }

        over "Grid" (
            active = false
        )
        {
        }

        over "Looks"
        {
            over "GroundMATSG" (
                active = false
            )
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "GridMATSG" (
                active = false
            )
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }

            over "DomeMATSG"
            {
                string inputs:file5:varname (
                    customData = {
                        dictionary realitykit = {
                            int stackingOrderInSubgraph = 13
                        }
                    }
                )
                asset inputs:image = @autumn_field_4k.hdr@ (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-809.14417, 22.825876)
                            int stackingOrderInSubgraph = 15
                        }
                    }
                )
                token outputs:mtlx:surface.connect = </Root/SkyDome/Looks/DomeMATSG/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SkyDome/Looks/DomeMATSG/DomeMAT.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (112.375, 110.5)

                over "DomeMAT" (
                    active = false
                )
                {
                    color3f inputs:diffuseColor = (0.08266256, 0.08266256, 0.08266256) (
                        colorSpace = "srgb_displayp3"
                    )
                    color3f inputs:diffuseColor.connect = </Root/SkyDome/Looks/DomeMATSG/diffuseColor.outputs:rgb>
                    float inputs:opacity = 0.8
                }

                def Shader "diffuseColor"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @rogland_clear_night_4k.hdr@
                    float2 inputs:st.connect = </Root/SkyDome/Looks/DomeMATSG/diffuseColor/TexCoordReader.outputs:result>
                    color3f outputs:rgb

                    def Shader "TexCoordReader"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname.connect = </Root/SkyDome/Looks/DomeMATSG.inputs:frame:stPrimvarName>
                        float2 outputs:result
                    }
                }

                def Shader "PreviewSurface"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    color3f inputs:diffuseColor.connect = </Root/SkyDome/Looks/DomeMATSG/Image2D.outputs:out>
                    float inputs:metallic
                    float3 inputs:normal
                    float inputs:opacity = 0.9
                    float inputs:roughness = 1
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-322.26953, 104.89453)
                    int ui:nodegraph:node:stackingOrder = 15
                }

                def Shader "Image2D"
                {
                    uniform token info:id = "ND_RealityKitTexture2D_color3"
                    string inputs:border_color
                    asset inputs:file.connect = </Root/SkyDome/Looks/DomeMATSG.inputs:image>
                    bool inputs:no_flip_v = 1
                    int2 inputs:offset
                    string inputs:u_wrap_mode
                    string inputs:v_wrap_mode
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-612.54767, 89.80469)
                    int ui:nodegraph:node:stackingOrder = 12
                }
            }
        }

        over "Dome_01"
        {
            float3 xformOp:scale = (0.03, 0.03, 0.03)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def "Redgum_4_LOD0" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        prepend references = @Trees/Red Gum/Redgum_4_LOD0.usdc@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (10.180155, 0, -7.4673977)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Redgum_2_LOD0" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        prepend references = @Trees/Red Gum/Redgum_2_LOD0.usdc@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (8.962485, 0, 3.3865347)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Branch1" (
        active = true
        prepend references = @Branches/Branch1.usdc@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (3.741787, 0, -16.4037)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Branch2" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.0517622, 0)
        }
        prepend references = @Branches/Branch2.usdc@
    )
    {
        quatf xformOp:orient = (0.86488193, 0, 0.5019753, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-4.7953672, 0, -6.622853)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "Branch3" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.2129173, 0)
        }
        prepend references = @Branches/Branch3.usdc@
    )
    {
        quatf xformOp:orient = (0.82167155, 0, 0.56996125, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (3.7728605, 0, -3.8907747)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Cylinder "Cylinder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/Material> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float3 xformOp:scale = (400, 2.220446e-16, 400)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Material "Material"
    {
        float inputs:TileSize = 30 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-951.83386, 131.18794)
                    int stackingOrderInSubgraph = 288
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/Material/PBRSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

        def Shader "TiledImage" (
            prepend references = @Ground Textures/Ground.usda@</Root/Material/TiledImage>
        )
        {
            uniform token info:id = "ND_tiledimage_color3"
            float2 inputs:realworldtilesize.connect = </Root/Material/Combine2.outputs:out>
            float2 ui:nodegraph:node:pos = (-553.53174, -35.97975)
            int ui:nodegraph:node:stackingOrder = 289
        }

        def Shader "PBRSurface" (
            prepend references = @Ground Textures/Ground.usda@</Root/Material/PBRSurface>
        )
        {
            uniform token info:id = "ND_realitykit_pbr_surfaceshader"
            color3f inputs:baseColor.connect = </Root/Material/TiledImage.outputs:out>
            float2 ui:nodegraph:node:pos = (-263.19717, 252.1972)
            int ui:nodegraph:node:stackingOrder = 288
        }

        def Shader "Combine2" (
            prepend references = @Ground Textures/Ground.usda@</Root/Material/Combine2>
        )
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1.connect = </Root/Material.inputs:TileSize>
            float inputs:in2.connect = </Root/Material.inputs:TileSize>
            float2 ui:nodegraph:node:pos = (-794.12, 132.83563)
            int ui:nodegraph:node:stackingOrder = 288
        }
    }
}

