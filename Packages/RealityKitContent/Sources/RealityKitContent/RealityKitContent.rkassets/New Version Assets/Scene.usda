#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Trees", "Trees_2", "Ground_1", "Animals", "Branches_1", "Leaf_Emitter", "Rocks", "Falling_Leaves", "Birds", "Looping_Birds", "Kangaroo_1", "Kangaroo_Loop", "Bird_Audio"]
    def "Trees" (
        active = false
        customData = {
            float3 rotationEulerHint = (-1.5707963, 0, 0)
        }
        references = @Trees/Trees.usdc@
    )
    {
        reorder nameChildren = ["Redgum_2_LOD0_002", "_materials", "Redgum_3_LOD0_002", "Redgum_2_LOD0_001", "Redgum_4_LOD0_001", "Redgum_3_LOD0_001", "Redgum_Large_LOD0", "Redgum_4_LOD0", "Redgum_3_LOD0", "Redgum_2_LOD0", "Redgum_2_LOD0_1"]
        quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "_materials"
        {
            over "Eucalyptus_bark_1_Mat"
            {
                token outputs:realitykit:vertex
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (392.5, 444)

                over "ND_standard_surface_surfaceshader"
                {
                    float2 ui:nodegraph:node:pos = (122, 444)
                }
            }
        }

        over "Redgum_2_LOD0"
        {
        }

        over "Redgum_3_LOD0"
        {
        }

        over "Redgum_4_LOD0"
        {
        }

        over "Redgum_Large_LOD0"
        {
        }

        over "Redgum_3_LOD0_001"
        {
        }

        over "Redgum_4_LOD0_001"
        {
        }

        over "Redgum_2_LOD0_001"
        {
        }

        over "Redgum_3_LOD0_002"
        {
        }

        over "Redgum_2_LOD0_002"
        {
        }
    }

    def Scope "Trees_2" (
        active = true
    )
    {
        def Xform "Trees_1" (
            active = false
        )
        {
            reorder nameChildren = ["Redgum_Large_LOD2", "Redgum_4_LOD0", "Redgum_3_LOD0", "Redgum_2_LOD0", "Redgum_3_LOD0_1", "Redgum_4_LOD0_1", "Redgum_2_LOD0_1", "Redgum_3_LOD0_2", "Redgum_2_LOD0_2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Redgum_2_LOD0" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, -6.283185)
                }
                references = @../Trees/Red Gum/Redgum_2_LOD0.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (-4.335803, 0, -3.033708)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Redgum_2_LOD0"
                {
                    over "LOD0_001"
                    {
                    }
                }

                over "Bark1"
                {
                    over "FakeShadow"
                    {
                        float inputs:DownwardsAngle = 0
                    }
                }
            }

            def "Redgum_3_LOD0" (
                active = true
                references = @../Trees/Red Gum/Redgum_3_LOD0.usdc@
            )
            {
                float3 xformOp:scale = (0.83, 0.83, 0.83)
                float3 xformOp:translate = (14.483, 0, 53.607)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Redgum_4_LOD0" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, 0)
                }
                references = @../Trees/Red Gum/Redgum_4_LOD0.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (0.83, 0.83, 0.83)
                float3 xformOp:translate = (70.581, 0, -89.575)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Redgum_Large_LOD2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707961, -0.7649779, 4.131192e-8)
                }
                references = @../Trees/Red Gum/Redgum_Large_LOD2.usdc@
            )
            {
                quatf xformOp:orient = (0.65601027, -0.65601015, -0.263914, -0.26391393)
                float3 xformOp:scale = (0.83, 0.83, 0.83)
                float3 xformOp:translate = (39.375, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Bark1"
                {
                    over "FakeShadow"
                    {
                        float inputs:DownwardsAngle = 0
                    }
                }
            }

            def "Redgum_3_LOD0_1" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 1.1850786, 7.921424e-8)
                }
                references = @../Trees/Red Gum/Redgum_3_LOD0.usdc@
            )
            {
                quatf xformOp:orient = (0.82952523, -2.2119357e-8, 0.55846924, 3.2855105e-8)
                float3 xformOp:scale = (0.83, 0.83, 0.83)
                float3 xformOp:translate = (-90.421, 0, 97.708)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Redgum_4_LOD0_1" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, 0)
                }
                references = @../Trees/Red Gum/Redgum_4_LOD0.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (0.83, 0.83, 0.83)
                float3 xformOp:translate = (-75.942, 0, -88.6)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Redgum_2_LOD0_1" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707964, -0.84793234, 0)
                }
                references = @../Trees/Red Gum/Redgum_2_LOD0.usdc@
            )
            {
                quatf xformOp:orient = (0.6445027, -0.6445027, -0.29088867, -0.29088867)
                float3 xformOp:scale = (0.83, 0.83, 0.83)
                float3 xformOp:translate = (142.04805, 0, 41.966293)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Redgum_3_LOD0_2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, -5.202572, 0)
                }
                references = @../Trees/Red Gum/Redgum_3_LOD0.usdc@
            )
            {
                quatf xformOp:orient = (0.857551, 0, 0.514399, 0)
                float3 xformOp:scale = (0.83, 0.83000004, 0.83)
                float3 xformOp:translate = (-0.88920975, 0, 129.91382)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Redgum_2_LOD0_2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-4.7123885, 5.6871886, -9.424778)
                }
                references = @../Trees/Red Gum/Redgum_2_LOD0.usdc@
            )
            {
                quatf xformOp:orient = (-0.20761171, 0.20761171, 0.6759418, 0.6759418)
                float3 xformOp:scale = (0.83, 0.83, 0.83000004)
                float3 xformOp:translate = (102.53641, -4.7683716e-7, 109.85835)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Redgum_3_LOD0_3" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, -5.202572, 0)
                }
                references = @../Trees/Red Gum/Redgum_3_LOD0.usdc@
            )
            {
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (0.857551, 0, 0.514399, 0)
                float3 xformOp:scale = (0.83, 0.83000004, 0.83)
                float3 xformOp:translate = (-0.88920975, 0, -105.56584)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def RealityKitComponent "HierarchicalFade"
            {
                uniform token info:id = "RealityKit.HierarchicalFade"
                float opacity = 0
            }
        }
    }

    def Scope "Ground_1"
    {
        def Xform "Ground" (
            active = true
        )
        {
            reorder nameChildren = ["Plane1", "Plane2", "Plane3", "Plane4"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Plane1" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, 0)
                }
                references = @Ground/Plane1.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Plane2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, 0)
                }
                references = @Ground/Plane2.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Plane3" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, 0)
                }
                references = @Ground/Plane3.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Plane4" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, 0)
                }
                references = @Ground/Plane4.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def RealityKitTimeline "Birds"
    {
        reorder nameChildren = ["Track", "Track2"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                float3 axis = (0, 0.96296674, 0.26962015)
                int blendLayer = 300
                double duration = 30
                uniform token info:id = "89CEFF2F-96E2-4247-8054-553FCF9D951A"
                token orbitDirection = "counterClockwise"
                bool orientToPath = 1
                rel pivotEntity = </Root>
                float revolutions = 0.6
                double startTime = 0
                rel target = </Root/Animals/Birds_1>
            }
        }

        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "default subtree animation"
                int blendLayer = 500
                double duration = 0.6666666865348816
                uniform token info:id = "441DC2D9-E818-499B-B25C-21A4C3B34E7B"
                double loopCount = 45
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Root/Animals/Birds_1>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Looping_Birds"
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 500
                double duration = 30.00000089406967
                uniform token info:id = "4874E6A3-2A31-4771-BF0C-526CE97DF9CE"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Birds>
            }
        }
    }

    def RealityKitTimeline "Kangaroo_1"
    {
        reorder nameChildren = ["Track", "Track3", "Track2"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            reorder nameChildren = ["Animation", "Animation2", "Animation3"]
            def RealityKitAction "Animation"
            {
                string actionKind = "animation"
                string animation = "Walk"
                int blendLayer = 500
                double duration = 1.0121111111111112
                uniform token info:id = "E354BF32-C439-463A-B727-35F8B8701F36"
                double loopCount = 8
                bool parentControllers = 0
                bool separateAnimatedValue = 1
                double startTime = 4.3498519361933425
                rel target = </Root/Animals/Kangaroo>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation3"
            {
                string actionKind = "animation"
                string animation = "Jump Run"
                int blendLayer = 500
                double duration = 0.7089830164251343
                uniform token info:id = "7F58CA09-AAB6-48C0-8430-7150713C60CE"
                double loopCount = 3
                bool separateAnimatedValue = 1
                double startTime = 16.46025004843563
                rel target = </Root/Animals/Kangaroo>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2"
            {
                string actionKind = "animation"
                string animation = "Walk"
                int blendLayer = 500
                double duration = 1.0121111111111112
                uniform token info:id = "E354BF32-C439-463A-B727-35F8B8701F36"
                double loopCount = 28
                bool parentControllers = 0
                bool separateAnimatedValue = 1
                double startTime = 22.649244843615723
                rel target = </Root/Animals/Kangaroo>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track3"
        {
            reorder nameChildren = ["Animation2", "Animation2_1"]
            def RealityKitAction "Orbit"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 8.107841264007348
                uniform token info:id = "35F0598A-8D57-496E-AAE2-5752555487E0"
                token orbitDirection = "clockwise"
                bool orientToPath = 1
                rel pivotEntity = </Root>
                float revolutions = 0.15
                double startTime = 4.216398843610259
                rel target = </Root/Animals/Kangaroo>
            }

            def RealityKitAction "Orbit2"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 2.260141824856013
                uniform token info:id = "1C17D905-0D22-4149-A82F-64FF48BDC10C"
                bool orientToPath = 1
                rel pivotEntity = </Root>
                float revolutions = 0.2
                double startTime = 16.443710856236468
                rel target = </Root/Animals/Kangaroo>
            }

            def RealityKitAction "Orbit22"
            {
                string actionKind = "orbit"
                int blendLayer = 300
                double duration = 28.321278995674554
                uniform token info:id = "1C17D905-0D22-4149-A82F-64FF48BDC10C"
                bool orientToPath = 1
                rel pivotEntity = </Root>
                float revolutions = 0.65
                double startTime = 22.666298935819697
                rel target = </Root/Animals/Kangaroo>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
            }
        }

        def RealityKitTrack "Track2"
        {
            reorder nameChildren = ["Animation2", "Animation2_2", "Animation2_1", "Animation2_12"]
            def RealityKitAction "Animation2_1"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 4.802606627989083
                uniform token info:id = "24AD5B12-BBD1-43A8-A7A7-07CF7535793B"
                bool separateAnimatedValue = 1
                double startTime = 18.5020672626281
                rel target = </Root/Animals/Kangaroo>
                float2 ui:nodegraph:node:pos = (215.75, 104.5)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2_12"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 4.802606627989083
                uniform token info:id = "24AD5B12-BBD1-43A8-A7A7-07CF7535793B"
                bool separateAnimatedValue = 1
                double startTime = 50.82051337849813
                rel target = </Root/Animals/Kangaroo>
                float2 ui:nodegraph:node:pos = (235.75, 124.5)
                int ui:nodegraph:node:stackingOrder = 2

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 4.802606627989083
                uniform token info:id = "24AD5B12-BBD1-43A8-A7A7-07CF7535793B"
                bool separateAnimatedValue = 1
                double startTime = 12.181307868852453
                rel target = </Root/Animals/Kangaroo>

                def RealityKitStruct "handoffType"
                {
                }
            }

            def RealityKitAction "Animation2_2"
            {
                string actionKind = "animation"
                string animation = "Idle"
                int blendLayer = 500
                double duration = 4.802606627989083
                uniform token info:id = "24AD5B12-BBD1-43A8-A7A7-07CF7535793B"
                bool separateAnimatedValue = 1
                double startTime = 0
                rel target = </Root/Animals/Kangaroo>
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitTimeline "Kangaroo_Loop"
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Timeline"
            {
                string actionKind = "timeline"
                int blendLayer = 1000
                double duration = 55.62312000648721
                uniform token info:id = "250E2AFF-476F-45FF-84DB-94633F22326E"
                double loopCount = 0
                double startTime = 0
                rel timeline = </Root/Kangaroo_1>
            }
        }
    }

    def Scope "Animals" (
        active = true
    )
    {
        reorder nameChildren = ["Birds_1", "Kangaroo"]
        def "Birds_1" (
            customData = {
                float3 rotationEulerHint = (0.20943955, 0, 0)
            }
            references = @../Animals/bird.usdz@
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (0.9945219, 0.10452828, 0, 0)
            float3 xformOp:scale = (0.02, 0.02, 0.02)
            float3 xformOp:translate = (30, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "AnimationLibrary"
            {
                token info:id = "RealityKit.AnimationLibrary"

                def RealityKitAnimationFile "default_subtree_animation"
                {
                    uniform bool looping = 1
                    uniform string name = "default subtree animation"
                }
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = [
                    </Root/Animals/Birds_1/OnAddedToScene>,
                    </Root/Animals/Birds_1/OnAddedToScene2>,
                ]
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnAddedToScene"
            {
                rel actions = </Root/Animals/Birds_1/OnAddedToScene/Action>
                uniform bool exclusive
                rel triggers = </Root/Animals/Birds_1/OnAddedToScene/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Animals/Birds_1>
                    token info:id = "SceneTransition"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Looping_Birds>
                    rel animationLibraryKeyOverrideKey = </Root/Animals/Birds_1/OnAddedToScene/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }

            def RealityKitComponent "AudioLibrary"
            {
                uniform token info:id = "RealityKit.AudioLibrary"

                def RealityKitDict "resources"
                {
                    string[] keys = ["Yellow Tailed Black Cockatoo.mp3", "Yellow Tailed Black Cockatoo.wav"]
                    rel values = [
                        </Root/Yellow_Tailed_Black_Cockatoo_mp3>,
                        </Root/Yellow_Tailed_Black_Cockatoo_wav>,
                    ]
                }
            }

            def Preliminary_Behavior "OnAddedToScene2"
            {
                rel actions = </Root/Animals/Birds_1/OnAddedToScene2/Action>
                uniform bool exclusive
                rel triggers = </Root/Animals/Birds_1/OnAddedToScene2/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Animals/Birds_1>
                    token info:id = "SceneTransition"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Bird_Audio>
                    rel animationLibraryKeyOverrideKey = </Root/Animals/Birds_1/OnAddedToScene2/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }
        }

        def "Kangaroo" (
            references = @../Animals/Kangaroo.usda@
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (16.063843, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/Animals/Kangaroo/OnAddedToScene>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnAddedToScene"
            {
                rel actions = </Root/Animals/Kangaroo/OnAddedToScene/Action>
                uniform bool exclusive
                rel triggers = </Root/Animals/Kangaroo/OnAddedToScene/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/Animals/Kangaroo>
                    token info:id = "SceneTransition"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = </Root>
                    rel animationLibraryKey = </Root/Kangaroo_Loop>
                    rel animationLibraryKeyOverrideKey = </Root/Animals/Kangaroo/OnAddedToScene/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }
        }
    }

    def Scope "Branches_1" (
        active = true
    )
    {
        def Xform "Branches" (
            active = true
        )
        {
            reorder nameChildren = ["Branch1", "Branch3", "Branch2"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "Branch1" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, 0)
                }
                references = @../Branches/Branch1.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                float3 xformOp:translate = (0.8462639, 0, -3.2171483)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Branch3" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 0, 0)
                }
                references = @../Branches/Branch3.usdc@
            )
            {
                quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
                float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                float3 xformOp:translate = (9.0564575, 0, 4.902959)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            def "Branch2" (
                active = true
                customData = {
                    float3 rotationEulerHint = (-1.5707963, 2.7613758e-8, -1.6045203e-9)
                }
                references = @../Branches/Branch2.usdc@
            )
            {
                quatf xformOp:orient = (0.7071067, -0.70710677, 1.0330222e-8, 9.195654e-9)
                float3 xformOp:scale = (0.9999998, 0.9999998, 0.9999998)
                float3 xformOp:translate = (-4.048775, 0.25918156, 6.98201)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def Scope "Falling_Leaves" (
        active = true
    )
    {
        def "Leaf_Emitter" (
            active = true
            references = @Particles/Leaf Emitter.usda@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (-4.124301, 6, -2.8295407)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def "DistantLand" (
        active = false
        references = @../SkyDome/DistantLand.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, -27.702, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "HierarchicalFade"
        {
            float opacity = 0
        }
    }

    def "SkyCover" (
        active = false
        references = @../SkyDome/SkyCover.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "HierarchicalFade"
        {
            float opacity = 0
        }
    }

    def "Audio_Entity" (
        active = true
        references = @Audio/Audio Entity.usda@
    )
    {
        over "Grassland_Ambience_mp3"
        {
            uniform token normalization = "none"
        }
    }

    def "plane2" (
        active = true
        customData = {
            float3 rotationEulerHint = (-10.995574, -1.5707963, 0)
        }
        references = @../Trees/Billboarded/plane2.usdc@
    )
    {
        quatf xformOp:orient = (-0.4905379, 0.4905379, 0.50928634, 0.50928634)
        float3 xformOp:scale = (30, 30, 30.000004)
        float3 xformOp:translate = (-217.4376, 0, 41.16176)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "plane2_1" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707963, 0, 0)
        }
        references = @../Trees/Billboarded/plane2.usdc@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.7071067, 0, 0)
        float3 xformOp:scale = (30, 30, 30)
        float3 xformOp:translate = (-5.073568, 0, -233.80693)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "plane2_2" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707961, -0.7744962, -1.2508436e-7)
        }
        references = @../Trees/Billboarded/plane2.usdc@
    )
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (0.65474683, -0.6547467, -0.267033, -0.26703304)
        float3 xformOp:scale = (30, 29.999996, 29.999996)
        float3 xformOp:translate = (163.53357, 0, -165.03479)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "plane2_3" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707945, -1.4234567, -0.0000018270272)
        }
        references = @../Trees/Billboarded/plane2.usdc@
    )
    {
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (0.5354455, -0.5354453, -0.4618421, -0.46184212)
        float3 xformOp:scale = (30, 29.999996, 29.999996)
        float3 xformOp:translate = (199.08334, 0, -3.8654327)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "plane2_4" (
        active = true
        customData = {
            float3 rotationEulerHint = (-14.137166, -0.5662682, 0)
        }
        references = @../Trees/Billboarded/plane2.usdc@
    )
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (0.67895305, -0.67895305, -0.19754183, -0.19754182)
        float3 xformOp:scale = (30, 30.000002, 30.000004)
        float3 xformOp:translate = (-161.03967, 0, 243.96967)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "plane2_5" (
        active = true
        customData = {
            float3 rotationEulerHint = (-4.712389, -0.02632922, 3.1415925)
        }
        references = @../Trees/Billboarded/plane2.usdc@
    )
    {
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (-0.009308515, 0.009308517, 0.70704544, 0.70704556)
        float3 xformOp:scale = (29.999992, 29.999994, 29.999992)
        float3 xformOp:translate = (30.483986, 0, 261.9726)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def "plane2_6" (
        active = true
        customData = {
            float3 rotationEulerHint = (-4.712389, -0.91366833, 3.1415925)
        }
        references = @../Trees/Billboarded/plane2.usdc@
    )
    {
        float2 ui:nodegraph:node:pos = (40, 40)
        int ui:nodegraph:node:stackingOrder = 2
        quatf xformOp:orient = (-0.3119112, 0.31191126, 0.63459533, 0.6345955)
        float3 xformOp:scale = (29.999992, 29.999992, 29.99999)
        float3 xformOp:translate = (188.89201, 0.0000019073486, 205.35391)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def RealityKitTimeline "Bird_Audio"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Yellow Tailed Black Cockatoo.wav"
                bool controlPlayback = 1
                double duration = 19.853166666666667
                uniform token info:id = "0DFDEDBA-2951-459A-B266-227B4B889DE7"
                double startTime = 2.1490089823580036
                rel target = </Root/Animals/Birds_1>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitAudioFile "Yellow_Tailed_Black_Cockatoo_mp3"
    {
        uniform asset file = @Audio/Yellow Tailed Black Cockatoo.mp3@
        uniform bool shouldLoop = 0
    }

    def RealityKitAudioFile "Yellow_Tailed_Black_Cockatoo_wav"
    {
        uniform asset file = @Audio/Yellow Tailed Black Cockatoo.wav@
        uniform bool shouldLoop = 0
    }
}

